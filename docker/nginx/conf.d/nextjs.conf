upstream mk-next {
    server mk-next:3000;
}

server {
    listen 80 default_server proxy_protocol;
    listen [::]:80 default_server;
    set_real_ip_from mk-proxy;
    real_ip_header proxy_protocol;

    server_name _;
    # default headers
    include /etc/nginx/headers.conf;

    return      444;
}


server {
    listen 80  reuseport proxy_protocol;
    listen [::]:80  reuseport;
    server_name mkreg.dev;

    set_real_ip_from mk-proxy;
    real_ip_header proxy_protocol;

    # THREADING
    aio threads;
    directio 5m;

    types_hash_max_size 2048;

    proxy_buffering on;
    proxy_buffers 8 4k;
    proxy_http_version 1.1;
    proxy_cache_bypass $http_upgrade;
    proxy_cache mkreg_cache;
    proxy_cache_valid any 10m;
    proxy_cache_methods GET HEAD;
    proxy_cache_min_uses 1;
    proxy_cache_lock off;
    proxy_cache_use_stale error timeout updating http_502 http_503 http_504;
    proxy_cache_background_update on;

    # Locations

    # Block access to these locations
    location ~* /\.(?!well-known\/) {
        deny all;
    }

    location ~* (?:#.*#|\.(?:bak|conf|dist|fla|in[ci]|log|orig|psd|sh|sql|sw[op])|~)$ {
        deny all;
    }

    # Public locations
    location ~* \.(?:css|js|jpg|jpe?g|gif|png|svg|webp|ico|woff2|woff)$ {
        # default headers
        include /etc/nginx/headers.conf;
        expires 30d;
        proxy_pass http://mk-next;
    }



    location / {
        # default headers
        include /etc/nginx/headers.conf;
        expires 900s;
        proxy_pass http://mk-next;
    }
}
