# GLOBALS
global
log stdout format raw local0 debug
log stderr format raw local1 notice
chroot /var/lib/haproxy
stats socket /run/haproxy/admin.sock mode 660 level admin
stats timeout 20s
user "$HAPROXY_USER"
group "$HAPROXY_USER"
tune.bufsize 32768

# Distribute the health checks with a bit of randomness
spread-checks 5

# Threading / cpu map set
nbthread 3 
cpu-map auto:1/1-3 0-2

# SSL
# Mozilla intermediate configuration
ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

# curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
ssl-dh-param-file /etc/haproxy/ssl/dhparam-2048.pem

# cache SSL performance https://www.haproxy.com/documentation/aloha/12-0/traffic-management/lb-layer7/tls/
tune.ssl.cachesize 200000 # 40MB
tune.ssl.lifetime 3600 # 60 min

# Global default values
defaults
# Logging
log global
log-format [%t]\ %ci:%cp\ %ST\ %{+Q}hr\ %Tq/%Tw/%Tc/%Tr/%Tt\ %B\ %CC\ %CS\ %tsc\ %ac/%fc/%bc/%sc/%rc\ %sq/%bq\ %hs\ %{+Q}r

# HTTP mode config
mode http
option dontlognull
option log-health-checks
option log-separate-errors
option http-keep-alive
option abortonclose
# TIMEOUTS
timeout http-request 10s
timeout client  30s
timeout server  30s
timeout connect 3s

timeout http-keep-alive 2s
timeout queue 5s
timeout tunnel 2m
timeout client-fin 1s
timeout server-fin 1s
# perf tune
retries 3
maxconn 1048576
option tcp-smart-connect
option redispatch
option splice-auto

# Auth password
# printf "whatever_password" | mkpasswd --stdin --method=sha-256
userlist mk_auth
user mk password $5$gXDR7Xji$BcCFlhKYpBeNfJBGfOFCbWsQx.vM6H.CwOe7.VYRiC9

# FRONT ENDS
listen mk-http

bind :80 tfo
bind :::80 v6only tfo
# X-Content-Type-Options
http-response set-header X-Content-Type-Options nosniff
# X-Xss-Protection (for Chrome, Safari, IE)
http-response set-header X-Xss-Protection 1;\ mode=block
# X-Frame-Options (DENY or SELF)
http-response set-header X-Frame-Options DENY
# Delete Server Header
http-response del-header Server
# Delete Proxy Header
http-request del-header Proxy
# Revealing HTTPS URLs When Navigating Away to HTTP Sites
http-response set-header Referrer-Policy strict-origin-when-cross-origin
# X-Download-Options
http-response set-header X-Download-Options noopen
# capture headers
http-request capture req.hdr(CF-Connecting-IP) len 32
http-request capture req.hdr(CF-IPCountry) len 2
http-request capture req.hdr(User-Agent) len 100
# Redirects
http-request redirect code 301 location https://mkreg.dev%[capture.req.uri]


listen mk-https

bind :443 tfo ssl crt /etc/haproxy/ssl/haproxy_ecc.pem alpn h2,http/1.1 
bind :::443 v6only tfo ssl crt /etc/haproxy/ssl/haproxy_ecc.pem alpn h2,http/1.1 

# Redirects
http-request redirect code 301 location https://mkreg.dev%[capture.req.uri] if { hdr(host) -i www.mkreg.dev }

# Response headers

# HSTS (31536000 seconds = 1 year)
http-response set-header Strict-Transport-Security max-age=31536000,\ includeSubDomains,\ preload
# X-Content-Type-Options
http-response set-header X-Content-Type-Options nosniff
# X-DNS-Prefetch-Control
http-response set-header X-DNS-Prefetch-Control on
# X-Xss-Protection (for Chrome, Safari, IE)
http-response set-header X-Xss-Protection 1;\ mode=block
# X-Frame-Options (DENY or SELF)
http-response set-header X-Frame-Options DENY
# Delete Server Header
http-response del-header Connection
# Delete Proxy Header
http-request del-header Proxy
# Revealing HTTPS URLs When Navigating Away to HTTP Sites
http-response set-header Referrer-Policy strict-origin-when-cross-origin
# X-Download-Options
http-response set-header X-Download-Options noopen
# capture headers
http-request capture req.hdr(CF-Connecting-IP) len 32
http-request capture req.hdr(CF-IPCountry) len 2
http-request capture req.hdr(User-Agent) len 100


http-response replace-header Cache-Control (s-maxage=[^,]*),(.*) public,\ no-cache,\ proxy-revalidate

# ACL
acl auth_acl http_auth(mk_auth)
acl proxy_acl hdr(host) -i proxy.mkreg.dev
acl acl_nextjs hdr(host) -i mkreg.dev
#acl from_cf src -f /etc/haproxy/cf_ips.lst
#acl cf_ip_hdr req.hdr(CF-Connecting-IP) -m found

# CF REAL IP
#http-request set-header X-Forwarded-For %[req.hdr(CF-Connecting-IP)] if from_cf cf_ip_hdr
#capture request header X-Forwarded-For len 100

# auth
http-request auth realm Nope if proxy_acl !auth_acl

# use backends
use_backend nextjs if acl_nextjs
use_backend haproxy if proxy_acl

default_backend nextjs

# BACK ENDS
backend nextjs
option tcp-check
server srv mk-next:3000 check inter 5s

backend haproxy
option tcp-check
stats enable
stats hide-version
stats uri /
stats realm HAProxy\ Statistics
stats refresh 20s
server srv mk-haproxy:443 check port 443 inter 5s
