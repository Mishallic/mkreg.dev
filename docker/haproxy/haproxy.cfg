# GLOBALS
global
log stdout format raw  local0 debug
log stderr format raw  local1 notice
chroot /var/lib/haproxy
stats socket /run/haproxy/admin.sock mode 660 level admin
stats timeout 20s
user "$HAPROXY_USER"
group "$HAPROXY_USER"
nbproc 2
cpu-map auto:1/1-4 0-3

# Distribute the health checks with a bit of randomness
spread-checks 5

    # intermediate configuration
ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

# curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
ssl-dh-param-file /etc/haproxy/ssl/dhparam-2048.pem

# performance https://www.haproxy.com/documentation/aloha/12-0/traffic-management/lb-layer7/tls/
tune.ssl.cachesize 200000 # 40MB
tune.ssl.lifetime 900 # 15 min

# DEFAULTS
defaults
# HTTP OPTIONS
log global
log-format [%t]\ %ci:%cp\ %b/%s\ %ST\ %Tq/%Tw/%Tc/%Tr/%Tt\ %B\ %CC\ %CS\ %tsc\ %ac/%fc/%bc/%sc/%rc\ %sq/%bq\ %hr\ %hs\ %{+Q}r
mode    http
option  dontlognull
option  log-health-checks
option  log-separate-errors
#option http-keep-alive
option abortonclose
# TIMEOUTS
timeout http-request 5s
timeout client  70s
timeout server  70s
timeout connect 5s
maxconn 1048576
option tcp-smart-connect
option redispatch
option splice-auto

# FRONT ENDS
frontend mk
bind 0.0.0.0:80 tfo
bind :::80 v6only tfo

bind 0.0.0.0:443 tfo ssl crt /etc/haproxy/ssl/haproxy_ecc.pem alpn h2,http/1.1
bind :::443 v6only tfo ssl crt /etc/haproxy/ssl/haproxy_ecc.pem alpn h2,http/1.1

# HEADERS
http-request redirect scheme https if !{ ssl_fc }
http-request redirect code 301 location https://mkreg.dev%[capture.req.uri] if { hdr(host) -i www.mkreg.dev }
http-request set-header X-Forwarded-Proto https if { ssl_fc }
http-request set-header X-Forwarded-Port %[dst_port]

http-response add-header X-Frame-Options 'SAMEORIGIN always';
http-response add-header X-XSS-Protection '"1; mode=block" always';
http-response add-header X-Content-Type-Options 'nosniff always';
http-response add-header X-Download-Options 'noopen';
http-response add-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";

# CF REAL IP
acl from_cf src -f /etc/haproxy/cf_ips.lst
acl cf_ip_hdr req.hdr(CF-Connecting-IP) -m found
http-request set-header X-Forwarded-For %[req.hdr(CF-Connecting-IP)] if from_cf cf_ip_hdr

acl_ghost hdr(host) -i content.mkreg.dev
acl_nextjs hdr(host) -i mkreg.dev

use_backend nginx_ghost if acl_ghost
use_backend nginx_nextjs if acl_nextjs

default_backend nginx_proxy

# BACK ENDS
backend nginx_nextjs
 server srv mk-nginx:80 send-proxy check inter 5s

backend nginx_ghost
 server srv mk-nginx:81 send-proxy check inter 5s
